@page "/hiprint"
@using BlazorHiPrint.Client.Components
@using BootstrapBlazor.Components
@using PMSM.Client.WebApp.Client.Data
@rendermode InteractiveAuto

<PageTitle>HiPrint</PageTitle>

<div class="container-fluid" >
    <div class="row">
        <div class="col-sm-3" style="border: 1px solid #73AD21;">
            <div class="container ruler-div">
                <div class="div-box " @ondragend="@HandleDragEnd">
                    <div draggable="true" @ondragstart="(e)=>HandleDragStart(e,UnitType.QRCode)">QRCode</div>
                    <div draggable="true" @ondragstart="(e)=>HandleDragStart(e,UnitType.BarCode)">BarCode</div>
                    <div draggable="true" @ondragstart="(e)=>HandleDragStart(e,UnitType.Text)">Text</div>
                    <div draggable="true">Line</div>
                    <div draggable="true">Circle</div>
                </div>


            </div>
        </div>
        <div class="col-sm-6" >
            <div class="card">
                <div class="card-body" style="overflow-x:scroll">
                    <div class="hiprint-printTemplate">
                        <div class="hiprint-printPaper hidroppable design" original-height="175.6" tabindex="1" style="width: 420mm; height: 295.6mm;">


                            <div id="pw" style="position: absolute; width: 420mm; height: 295.6mm;  border: 3px solid #73AD21;"
                                 ondragover="event.preventDefault();" @ondrop="HandleDrop" @ondragstart="@TempWindDragStart" @ondrag="TempWindDrag">

                                @foreach (var item in MyItems)
                                {
                                    <MDragItem OnClicked="ItemCliecked" Temp="item" />
                                }
                            </div>
                            @if (showLine)
                            {

                                <div class="toplineOfPosition" style="position: absolute; top: @(lineTop)px;width:250mm"></div>
                            }


                            <div class="hiprint_rul_wrapper">
                                <img class="h_img" src="./images/l_img.svg">
                                <img class="v_img" src="./images/v_img.svg">
                                @*         <img class="v_img" src="/vue-plugin-hiprint/static/img/v_img.d7cff5bd.svg"> *@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
           
        </div>
        <div class="col-sm-3" style="border: 1px solid #73AD21;">
            @if (SelectedItem != null)
            {
                <p role="status">Current Top: @SelectedItem.Top</p>

                <MQRCodeConfig Value="SelectedItem"></MQRCodeConfig>
            }
        </div>
    </div>

</div>



@code {

    MTemplateUnit m1 = new MTemplateUnit
        {
            Top = 10,
            Left = 10,
            Text = "ABC1",
            UnitType = UnitType.QRCode
        };
    MTemplateUnit m2 = new MTemplateUnit
        {
            Top = 10,
            Left = 10,
            Text = "ABC2",

        };
    protected override async Task OnInitializedAsync()
    {
        m1.FiledHasChanged = (_, _) => StateHasChanged();
        m2.FiledHasChanged = (_, _) => StateHasChanged();

        MyItems = new List<MTemplateUnit>() { m1, m2 };
        SelectedItem = m1;
        await base.OnInitializedAsync();
    }

    List<MTemplateUnit> MyItems;
    MTemplateUnit SelectedItem;

    void ItemCliecked(MTemplateUnit item)
    {
        SelectedItem = item;
        StateHasChanged();
    }

    bool isReadyAddNew = false;
    bool showLine = false;
    // ondrop事件处理方法
    private void HandleDrop(DragEventArgs args)
    {
        //...省略若干代码
        // 刷新界面

        if (isReadyAddNew)
        {
            SelectedItem = new MTemplateUnit
                {
                    Top = args.OffsetY,
                    Left = args.OffsetX,
                    Text = "ABCC",
                    UnitType = UnitType.QRCode,
                    FiledHasChanged = (_, _) => StateHasChanged(),
                };
            MyItems.Add(SelectedItem);
            isReadyAddNew = false;
        }
        else
        {
            // 鼠标移动如果没有超过 MDragItem 的范围，offsetX Y 的值会是 MDragItem 内部的相对位置，移动会有问题，
            // 这里是要获取鼠标移动的相对距离
            SelectedItem.Top += args.ClientY - top;
            SelectedItem.Left += args.ClientX - left;


            StateHasChanged();
        }
        showLine = false;

    }
    //新增元素开始拖拽，将isReadyAddNew 设置为true，表示可以新增元素。
    private void HandleDragStart(DragEventArgs args, UnitType type)
    {
        isReadyAddNew = true;

    }
    //主要用来处理拖拽一半之后放弃新增元素。
    private void HandleDragEnd(DragEventArgs args)
    {
        isReadyAddNew = false;
    }
    //记录拖拽开始时的位置，用来计算移动的相对位置
    private void TempWindDragStart(DragEventArgs args)
    {
        top = args.ClientY;
        left = args.ClientX;
        args.DataTransfer.EffectAllowed = "move";
        showLine = true;
    }
    private void TempWindDrag(DragEventArgs args)
    {
        lineTop = SelectedItem.Top + args.ClientY - top;
        // top = args.ClientY;
        // left = args.ClientX;
        // args.DataTransfer.EffectAllowed = "move";
    }
    double top { get; set; } = 20;
    double left { get; set; } = 20;
    double lineTop { get; set; } = 0;
    // private Task PrintPreviewClick() => DialogService.Show(new DialogOption()
    //     {
    //         IsKeyboard = false,
    //         Title = "I am the popup created by the service",
    //         BodyTemplate = BootstrapDynamicComponent.CreateComponent<Button>(new Dictionary<string, object?>
    //         {
    //             [nameof(Button.ChildContent)] = new RenderFragment(builder => builder.AddContent(0, "Button"))
    //         }).Render()
    //     });
    // private Task PrintPreviewClick() => DialogService.Show(new DialogOption()
    //     {
    //         Title = "Built-in Counter component",
    //         Component = BootstrapDynamicComponent.CreateComponent<Counter>()
    //     });

    async Task PrintPreviewClick()
    {
        // var op = new DialogOption
        //     {
        //         Title = "PrintsDialogTitle",
        //         ShowPrintButton = true,
        //         ShowPrintButtonInHeader = true,
        //         ShowFooter = false,
        //         BodyContext = 1,

        //         Component = BootstrapDynamicComponent.CreateComponent<PrintPreview>()
        //     };

        // await DialogService.Show(op);

    //     IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import",
    // "./Pages/BuiltContent.razor.js");

    //     await module.InvokeVoidAsync("PrintDiv", "pw");
    }

}