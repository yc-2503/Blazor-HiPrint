@using System.Diagnostics.CodeAnalysis
@using BlazorHiPrint.Client.Data
@using BootstrapBlazor.Components
<div style="@Style" draggable="true" @onclick="@OnClick" @ondragstart="@HandleDragStart" >

    @if (selectedType != null)
    {
        <DynamicComponent Type="selectedType" Parameters="parameter" />

    }else
    {

        <div>NULL</div>
    }
</div>
@code {
    [NotNull]
    [Parameter]
    public MTmpltBase? Temp { get; set; }
    [Parameter]
    public Action<MTmpltBase>? OnClicked { get; set; }
    Dictionary<string, object>? parameter;
    protected override async Task OnParametersSetAsync()
    {
        parameter = new Dictionary<string, object>()
        {
            { "Value", Temp }
        };
        Temp.FiledHasChanged =  (_, _) => StateHasChanged();
        selectedType = PrintElementsFactory.GetPrintElementType(Temp);
        await base.OnParametersSetAsync();
    }
    string Style
    {
        get
        {

            //直接使用字符串连接
            return $@"  position: absolute;
            top: {Temp.Top}px;
            left: {Temp.Left}px;";
        }

    }

    private Type? selectedType = null;


    private void OnClick()
    {

        if(OnClicked != null)
        {
            OnClicked(Temp);
        }
    }
    private void HandleDragStart(DragEventArgs args)
    {
        args.DataTransfer.DropEffect = "move";
        args.DataTransfer.EffectAllowed = "move";
        if (OnClicked != null)
        {
            OnClicked(Temp);
        }
    }
}
