@using System.Diagnostics.CodeAnalysis
@using BlazorHiPrint.Client.Data
@using BootstrapBlazor.Components
<div class="hiprint-printElement design" style="@Style" draggable="true" 
@onclick="@OnClick" @onclick:stopPropagation="true" 
tabindex="0"
@ondragstart="@HandleDragStart" @onkeydown="PrintPaperOnKeyPressed">

    @if (selectedType != null)
    {
        <DynamicComponent Type="selectedType" Parameters="parameter" />

    }else
    {

        <div>NULL</div>
    }
    @* 这里的 selected 似乎没有什么用处 *@
    <div  class="resize-panel selected" 
    style="width: 100%; height: 100%; top: 0px; left: 0px; position: absolute;
        background-color: rgba(0, 0, 0, 0.5); cursor: move; display: @Display;">

        <div class="del-btn" @onclick="OnDelBtnClick" >✕</div>
                           <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square col-sm-2" viewBox="0 0 16 16">
                            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                        </svg>
    </div>
</div>
@code {
    [NotNull]
    [Parameter]
    public MTmpltBase? Temp { get; set; }
    [Parameter]
    public Action<MTmpltBase>? OnClicked { get; set; }
    [Parameter]
    public Action<MTmpltBase>? OnDeletedEventHandler { get; set; }
    Dictionary<string, object>? parameter;

    string Display { get { return Temp.IsSelected ? "block" : "none"; } }
    
    //避免改动一个控件的时候，渲染整个画布
    bool _shouldRender = false;
    protected override bool ShouldRender()
    {
        return _shouldRender;
    }
    protected override async Task OnParametersSetAsync()
    {
        parameter = new Dictionary<string, object>()
        {
            { "Value", Temp }
        };
        Temp.FieldHasChanged = (_, _) => { _shouldRender = true; StateHasChanged(); };
        selectedType = PrintElementsFactory.GetPrintElementType(Temp);
        await base.OnParametersSetAsync();
        _shouldRender = false;
    }
    string Style
    {
        get
        {

            //直接使用字符串连接
            return $@"  position: absolute;
            top: {Temp.Top}px;
            left: {Temp.Left}px;";
        }

    }

    private Type? selectedType = null;


    private void OnClick()
    {
        Temp.IsSelected = true;   
        if(OnClicked != null)
        {
            OnClicked(Temp);
        }
    }
    void OnDelBtnClick()
    {
        //   MyPrintItems.RemoveAll(x => x.IsSelected);
        if(OnDeletedEventHandler !=null)
        {
            OnDeletedEventHandler(Temp);
        }
    }
    void PrintPaperOnKeyPressed(KeyboardEventArgs args)
    {
        if (args.Key == "Delete")
        {
            //   MyPrintItems.RemoveAll(x => x.IsSelected);
            if(OnDeletedEventHandler !=null)
            {
                OnDeletedEventHandler(Temp);
            }
        }
    }
    private void HandleDragStart(DragEventArgs args)
    {
        args.DataTransfer.DropEffect = "move";
        args.DataTransfer.EffectAllowed = "move";
        if (OnClicked != null)
        {
            OnClicked(Temp);
        }
    }

}
