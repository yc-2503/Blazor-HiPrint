@using BlazorHiPrint.Client.Data

@inherits MElementBase<MCircleTmplt>
<div>
    <svg width="@(Data.Diameter+4)px" height="@(Data.Diameter+4)px">
        <circle cx="@((Data.Diameter+4)/2)px" cy="@((Data.Diameter+4)/2)px" r="@(Data.Diameter/2)px" 
                style="fill:none;stroke:black;stroke-width:1;opacity:1" />
    </svg>
    <div style="display: @Display;" @ondrag:stopPropagation="true" @ondragstart:stopPropagation="true">
        <div class="s resizebtn" draggable="true" @ondrag="TempWindDrag" @ondragstart="@TempWindDragStart" 
             style="cursor: s-resize; bottom: -12px; 
                    margin-left: -4px; left: 50%; position: absolute; width: 8px; height: 8px; background: rgb(255, 102, 0); border-radius: 50%;">
        </div>
        <div class="e resizebtn" draggable="true" @ondrag="TempWindDrag" @ondragstart="@TempWindDragStart" 
             style="cursor: e-resize; top: 50%; 
                    margin-top: -4px; right: -12px; position: absolute; width: 8px; height: 8px; background: rgb(255, 102, 0); border-radius: 50%;">
        </div>
        <div class="se resizebtn" draggable="true" @ondrag="TempWindDrag" @ondragstart="@TempWindDragStart" 
             style="cursor: se-resize; bottom: -12px; right: -12px; position: absolute; width: 8px; height: 8px; background: rgb(255, 102, 0); border-radius: 50%;">
        </div>
    </div>
</div>

@code {

    
    string Display { get { return Data.IsSelected ? "block" : "none"; } }

    double dragStartTop { get; set; } = 20;
    double dratStartLeft { get; set; } = 20;

    private void TempWindDrag(DragEventArgs args)
    {
        Data.Radius += (args.ClientX - dratStartLeft) / 2;
        dragStartTop = args.ClientY;
        dratStartLeft = args.ClientX;
    }

    private void TempWindDragStart(DragEventArgs args)
    {
        dragStartTop = args.ClientY;
        dratStartLeft = args.ClientX;
    }
}
