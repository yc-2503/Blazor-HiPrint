@page "/hiprint"
@using System.Diagnostics.CodeAnalysis
@using BlazorHiPrint.Client.Components
@using BlazorHiPrint.Client.Data
@using BootstrapBlazor.Components
@rendermode InteractiveAuto

<PageTitle>HiPrint</PageTitle>

<div class="paper-size-controls mb-3">
    <select class="form-select" @bind="CurrentPaperSizeKey">
        <option value="A3">A3 (297 × 420mm)</option>
        <option value="A4">A4 (210 × 297mm)</option>
        <option value="A5">A5 (148 × 210mm)</option>
        <option value="B3">B3 (353 × 500mm)</option>
        <option value="B4">B4 (250 × 353mm)</option>
        <option value="B5">B5 (176 × 250mm)</option>
    </select>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-sm-2" style="border: 1px solid #73AD21;">
            <div class="container ruler-div">
                <div class="div-box " @ondragend="@HandleDragEnd">
                    <div draggable="true" @ondragstart="(e)=>HandleDragStart(e,UnitType.BarCode)">BarCode</div>
                    <div draggable="true" @ondragstart="(e)=>HandleDragStart(e,UnitType.Text)">Text</div>
                    <div draggable="true" @ondragstart="(e)=>HandleDragStart(e,UnitType.Rectangle)">Rectangle</div>
                    <div draggable="true" @ondragstart="(e)=>HandleDragStart(e,UnitType.Line)">Line</div>
                    <div draggable="true" @ondragstart="(e)=>HandleDragStart(e,UnitType.Circle)">Circle</div>
                    <div draggable="true" @ondragstart="(e)=>HandleDragStart(e,UnitType.Table)">Table</div>
                    <div draggable="true" @ondragstart="(e)=>HandleDragStart(e,UnitType.Image)">Image</div>
                </div>
            </div>
        </div>
        <div class="col-sm-8" >
            <div class="card border-0">
                <div class="card-body" style="overflow-x:scroll">
                    <div class="hiprint-printTemplate">
                        <div class="hiprint-printPaper design" original-height="175.6" tabindex="0" style="width: @($"{CurrentPaperSize.Width}mm"); height: @($"{CurrentPaperSize.Height}mm");"
                        @onclick="PrintPaperClicked" >

                            <div id="pw" style="position: absolute; width: 100%; height: 100%;  border:  solid #73AD21;"
                            ondragover="event.preventDefault();" @ondrop="HandleDrop" @ondragstart="@TempWindDragStart" @ondrag="TempWindDrag">

                                @foreach (var item in MyPrintItems)
                                {
                                    <MDragItem OnClicked="PrintItemCliecked" OnDeletedEventHandler="ClearSelectedItems" Temp="item" />
                                }
                            </div>
                            @if (SelectedItem != null)
                            {
                                <div class="toplineOfPosition" style="position: absolute; top: @(SelectedItem.Top)px;width:250mm"></div>
                            }


                            <div class="hiprint_rul_wrapper">
                                <img class="h_img" src="./images/l_img.svg">
                                <img class="v_img" src="./images/v_img.svg">
                                @*         <img class="v_img" src="/vue-plugin-hiprint/static/img/v_img.d7cff5bd.svg"> *@
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="col-sm-2" style="border: 1px solid #73AD21;">
            @if (SelectedItem != null)
            {
                <DynamicComponent Type="selectedType" Parameters="configParameters"></DynamicComponent>
            }
        </div>
    </div>

</div>

@code {
    private Dictionary<string, (double Width, double Height)> PaperSizes = new()
    {
        ["A3"] = (420, 297),
        ["A4"] = (297, 210),
        ["A5"] = (210, 148),
        ["B3"] = (500, 353),
        ["B4"] = (353, 250),
        ["B5"] = (250, 176)
    };

    private string CurrentPaperSizeKey { get; set; } = "A3";
    private (double Width, double Height) CurrentPaperSize => PaperSizes[CurrentPaperSizeKey];

    protected override async Task OnInitializedAsync()
    {
        InitDemo();
        await base.OnInitializedAsync();

    }
    void InitDemo()
    {
        MyPrintItems.Clear();

        MTmpltBase m2 = PrintElementsFactory.CreateMTmplt(new CreateMTmpltOptions()
            {
                Top = 10,
                Left = 10,
            //    FiledHasChanged = (_, _) => StateHasChanged(),
                UnitType = UnitType.Text
        });
        MTmpltBase m3 = PrintElementsFactory.CreateMTmplt(new CreateMTmpltOptions()
            {
                Top = 20,
                Left = 60,
            //    FiledHasChanged = (_, _) => StateHasChanged(),
                UnitType = UnitType.BarCode
        });

        MTmpltBase m4 = PrintElementsFactory.CreateMTmplt(new CreateMTmpltOptions()
            {
                Top = 160,
                Left = 10,
            //    FiledHasChanged = (_, _) => StateHasChanged(),
                UnitType = UnitType.Rectangle
            });
        MTmpltBase m5 = PrintElementsFactory.CreateMTmplt(new CreateMTmpltOptions()
            {
                Top = 180,
                Left = 30,
            //    FiledHasChanged = (_, _) => StateHasChanged(),
                UnitType = UnitType.Line
            });

        IEnumerable<Person> people = new[]
    {
        new Person(10895, "Jean Martin", new DateOnly(1985, 3, 16)),
        new Person(10944, "António Langa", new DateOnly(1991, 12, 1)),
        new Person(11203, "Julie Smith", new DateOnly(1958, 10, 10)),
        new Person(11205, "Nur Sari", new DateOnly(1922, 4, 27)),
        new Person(11898, "Jose Hernandez", new DateOnly(2011, 5, 3)),
        new Person(12130, "Kenji Sato", new DateOnly(2004, 1, 9)),
    };

        IEnumerable<MTableColumn> tableColumns = new[]
        {
            new MTableColumn("PersonId"),
            new MTableColumn("Name"),
            new MTableColumn("PromotionDate"),

        };
        MTableTmplt m6 = new MTableTmplt(100, 40, null)
        {
            TModel= typeof(Person),
            Columns = tableColumns,
            Items = people
        };
        SelectedItem = m2;
        configParameters["Value"] = SelectedItem;

        MyPrintItems.Add(m2);
        MyPrintItems.Add(m3);
        MyPrintItems.Add(m4);
        MyPrintItems.Add(m5);
        MyPrintItems.Add(m6);


    }
    //用来区分拖拽过程是新建的还是移动
    bool isReadyAddNew = false;
    //新建元素的类型
    UnitType newType;

    //元素拖拽过程，记录元素开始位置,用于计算鼠标移动的相对位置
    double dragStartTop { get; set; } = 20;
    double dragStartLeft { get; set; } = 20;

    Dictionary<string, object> configParameters = new Dictionary<string, object>();
    //打印模板上的元素
    List<MTmpltBase> MyPrintItems = new List<MTmpltBase>();
    MTmpltBase? _selectedItem;
    MTmpltBase? SelectedItem
    {
        get { return _selectedItem; }
        set
        {
            _selectedItem = value;
            configParameters["Value"] = value;
        }
    }
    private Type? selectedType => PrintElementsFactory.GetPrintElementConfigureType(SelectedItem!);

    void PrintItemCliecked(MTmpltBase item)
    {
        foreach (var pm in MyPrintItems)
        {
            if(pm != item)
            {
                pm.IsSelected = false;
            }
        }
        SelectedItem = item;
        configParameters = new Dictionary<string, object>()
        {
            { "Value", SelectedItem },
        };
        StateHasChanged();
    }
    //打印纸空白区域被点击
    void PrintPaperClicked(MouseEventArgs args)
    {
        foreach (var pm in MyPrintItems)
        {
            pm.IsSelected = false;

        }
        SelectedItem = null;
    }

    void ClearSelectedItems(MTmpltBase item)
    {
        MyPrintItems.Remove(item);
        StateHasChanged();
    }
    // ondrop事件处理方法
    private void HandleDrop(DragEventArgs args)
    {
        //...省略若干代码
        // 刷新界面

        if (isReadyAddNew)
        {
            CreateMTmpltOptions options  = new CreateMTmpltOptions()
            {
                    Top = args.OffsetY,
                    Left = args.OffsetX,
                    UnitType = newType,
                //   FiledHasChanged = (_, _) => StateHasChanged(),
            };
            SelectedItem = PrintElementsFactory.CreateMTmplt(options);
            MyPrintItems.Add(SelectedItem);
            isReadyAddNew = false;
        }

        //这个方法要小心，内部控件的拖拽释放也会进入到这里，比如矩形框调整宽度的拖拽

    }
    //新增元素开始拖拽，将isReadyAddNew 设置为true，表示可以新增元素。
    private void HandleDragStart(DragEventArgs args, UnitType type)
    {
        isReadyAddNew = true;
        newType = type;
    }
    //主要用来处理拖拽一半之后放弃新增元素。
    private void HandleDragEnd(DragEventArgs args)
    {
        isReadyAddNew = false;
    }
    //记录拖拽开始时的位置，用来计算移动的相对位置
    private void TempWindDragStart(DragEventArgs args)
    {
        dragStartTop = args.ClientY;
        dragStartLeft = args.ClientX;

    }
    private void TempWindDrag(DragEventArgs args)
    {
        if (SelectedItem != null)
        {
            if(args.ClientX<=0 || args.ClientY<=0)
            {
                return;
            }
            double dy = args.ClientY - dragStartTop;
            double dx = args.ClientX - dragStartLeft;
            if(Math.Abs(dx)< 2.2 && Math.Abs(dy)<2)
            {
                return;
            }
            // 鼠标移动如果没有超过 MDragItem 的范围，offsetX Y 的值会是 MDragItem 内部的相对位置，移动会有问题，
            // 这里是要获取鼠标移动的相对距离
            SelectedItem.Top += dy;
            SelectedItem.Left += dx;
            //SelectedItem.MoveTo(SelectedItem.Left+dx,SelectedItem.Top+dy);
 
            dragStartLeft = args.ClientX;
            dragStartTop = args.ClientY;
        }
        // top = args.ClientY;
        // left = args.ClientX;
        // args.DataTransfer.EffectAllowed = "move";
    }



    //打印模板上的元素


}
