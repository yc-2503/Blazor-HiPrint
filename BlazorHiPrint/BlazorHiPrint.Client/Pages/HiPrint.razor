@page "/hiprint"
@using System.Diagnostics.CodeAnalysis
@using BlazorHiPrint.Client.Components
@using BlazorHiPrint.Client.Data
@using BootstrapBlazor.Components
@rendermode InteractiveAuto

<PageTitle>HiPrint</PageTitle>
@* <div>
    <svg>
        <rect class="d-flex align-center justify-center" width="100px" 
      height="120px" 
        style="fill:none;stroke:black;stroke-width:1;opacity:1"
      x="50"
      y="0" />
    </svg>
</div> *@
<div class="container-fluid" >
    <div class="row">
        <div class="col-sm-3" style="border: 1px solid #73AD21;">
            <div class="container ruler-div">
                <div class="div-box " @ondragend="@HandleDragEnd">
                    <div draggable="true" @ondragstart="(e)=>HandleDragStart(e,UnitType.QRCode)">QRCode</div>
                    <div draggable="true" @ondragstart="(e)=>HandleDragStart(e,UnitType.BarCode)">BarCode</div>
                    <div draggable="true" @ondragstart="(e)=>HandleDragStart(e,UnitType.Text)">Text</div>
                    <div draggable="true">Line</div>
                    <div draggable="true">Circle</div>
                </div>


            </div>
        </div>
        <div class="col-sm-6" >
            <div class="card border-0">
                <div class="card-body" style="overflow-x:scroll">
                    <div class="hiprint-printTemplate">
                        <div class="hiprint-printPaper  design" original-height="175.6" tabindex="0" style="width: 420mm; height: 295.6mm;"
                        @onclick="PrintPaperClicked" >

                            <div id="pw" style="position: absolute; width: 100%; height: 100%;  border:  solid #73AD21;"
                            ondragover="event.preventDefault();" @ondrop="HandleDrop" @ondragstart="@TempWindDragStart" @ondrag="TempWindDrag">

                                @foreach (var item in MyPrintItems)
                                {
                                    <MDragItem OnClicked="PrintItemCliecked" OnDeletedEventHandler="ClearSelectedItems" Temp="item" />
                                }
                            </div>
                            @if (showLine)
                            {
                                <div class="toplineOfPosition" style="position: absolute; top: @(lineTop)px;width:250mm"></div>
                            }


                            <div class="hiprint_rul_wrapper">
                                <img class="h_img" src="./images/l_img.svg">
                                <img class="v_img" src="./images/v_img.svg">
                                @*         <img class="v_img" src="/vue-plugin-hiprint/static/img/v_img.d7cff5bd.svg"> *@
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="col-sm-3" style="border: 1px solid #73AD21;">
            @if (SelectedItem != null)
            {
                <DynamicComponent Type="selectedType" Parameters="configParameters"></DynamicComponent>
            }
        </div>
    </div>

</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        InitDemo();
        await base.OnInitializedAsync();

    }
    void InitDemo()
    {
        MTmpltBase m1 = PrintElementsFactory.CreateMTmplt(new CreateMTmpltOptions()
        {
                Top = 10,
                Left = 10,
            //    FiledHasChanged = (_, _) => StateHasChanged(),
                UnitType = UnitType.QRCode
        });
        MTmpltBase m2 = PrintElementsFactory.CreateMTmplt(new CreateMTmpltOptions()
            {
                Top = 10,
                Left = 10,
            //    FiledHasChanged = (_, _) => StateHasChanged(),
                UnitType = UnitType.Text
        });
        MTmpltBase m3 = PrintElementsFactory.CreateMTmplt(new CreateMTmpltOptions()
            {
                Top = 20,
                Left = 60,
            //    FiledHasChanged = (_, _) => StateHasChanged(),
                UnitType = UnitType.BarCode
        });


        SelectedItem = m1;
        configParameters["Value"] = SelectedItem;
        MyPrintItems.Add(m1);
        MyPrintItems.Add(m2);
        MyPrintItems.Add(m3);

    }
    //用来区分拖拽过程是新建的还是移动
    bool isReadyAddNew = false;
    //新建元素的类型
    UnitType newType;
    //元素拖拽过程，显示边界线
    bool showLine = false;
    //元素拖拽过程，记录元素开始位置,用于计算鼠标移动的相对位置
    double dragStartTop { get; set; } = 20;
    double dratStartLeft { get; set; } = 20;
    double lineTop { get; set; } = 0;
    Dictionary<string, object> configParameters = new Dictionary<string, object>();
    //打印模板上的元素
    List<MTmpltBase> MyPrintItems = new List<MTmpltBase>();
    MTmpltBase? _selectedItem;
    MTmpltBase? SelectedItem
    {
        get { return _selectedItem; }
        set
        {
            _selectedItem = value;
            configParameters["Value"] = value;
        }
    }
    private Type? selectedType => PrintElementsFactory.GetPrintElementConfigureType(SelectedItem!);

    void PrintItemCliecked(MTmpltBase item)
    {
        foreach (var pm in MyPrintItems)
        {
            if(pm != item)
            {
                pm.IsSelected = false;
            }
        }
        SelectedItem = item;
        configParameters = new Dictionary<string, object>()
        {
            { "Value", SelectedItem },
        };
        StateHasChanged();
    }
    //打印纸空白区域被点击
    void PrintPaperClicked(MouseEventArgs args)
    {
        foreach (var pm in MyPrintItems)
        {
            pm.IsSelected = false;

        }
        SelectedItem = null;
    }

    void ClearSelectedItems(MTmpltBase item)
    {
        MyPrintItems.Remove(item);
        StateHasChanged();
    }
    // ondrop事件处理方法
    private void HandleDrop(DragEventArgs args)
    {
        //...省略若干代码
        // 刷新界面

        if (isReadyAddNew)
        {
            CreateMTmpltOptions options  = new CreateMTmpltOptions()
            {
                    Top = args.OffsetY,
                    Left = args.OffsetX,
                    UnitType = newType,
                 //   FiledHasChanged = (_, _) => StateHasChanged(),
            };
            SelectedItem = PrintElementsFactory.CreateMTmplt(options);
            MyPrintItems.Add(SelectedItem);
            isReadyAddNew = false;
        }
        else
        {
            // 鼠标移动如果没有超过 MDragItem 的范围，offsetX Y 的值会是 MDragItem 内部的相对位置，移动会有问题，
            // 这里是要获取鼠标移动的相对距离
            SelectedItem.Top += args.ClientY - dragStartTop;
            SelectedItem.Left += args.ClientX - dratStartLeft;


            StateHasChanged();
        }
        showLine = false;

    }
    //新增元素开始拖拽，将isReadyAddNew 设置为true，表示可以新增元素。
    private void HandleDragStart(DragEventArgs args, UnitType type)
    {
        isReadyAddNew = true;
        newType = type;
    }
    //主要用来处理拖拽一半之后放弃新增元素。
    private void HandleDragEnd(DragEventArgs args)
    {
        isReadyAddNew = false;
    }
    //记录拖拽开始时的位置，用来计算移动的相对位置
    private void TempWindDragStart(DragEventArgs args)
    {
        dragStartTop = args.ClientY;
        dratStartLeft = args.ClientX;
        args.DataTransfer.EffectAllowed = "move";
        showLine = true;
    }
    private void TempWindDrag(DragEventArgs args)
    {
        if (SelectedItem != null)
        {

            lineTop = SelectedItem.Top + args.ClientY - dragStartTop;
        }
        // top = args.ClientY;
        // left = args.ClientX;
        // args.DataTransfer.EffectAllowed = "move";
    }



    //打印模板上的元素


}