@* 
  Auto-generating form component that creates an editable form based on a model object.
  Features:
  - Supports nested objects and collections
  - Collapsible sections for complex properties
  - Automatic input type detection (bool, enum, etc.)
*@
@using BlazorHiprint.DesignPaper.Data
@using System.Diagnostics.CodeAnalysis
@using System.Reflection
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq
@using BlazorHiprint.DesignPaper.Attributes

@* Main form container with scrollable area *@
<div style="min-height: auto; max-height: 500px; overflow-y: auto;margin:2px;">
    @if(componentPrpts != null)
    {
        <table>
            <tbody>
                @foreach(var prop in componentPrpts)
                {
                    if(prop.NeedCollapse)
                    {
                        <tr @onclick="() => ToggleCollapse(prop)">
                            @* First column: Collapse indicator *@
                            <td>
                                <div>@(prop.IsCollapsed?"-":"+")</div>
                            </td>
                            @* Second column: Property name (with level indentation) *@
                            <td>
                                <div style="padding-left: @(prop.Level * 5)px">
                                    @prop.Name
                                </div>
                            </td>
                            <td>
                                <div></div>
                            </td>
                        </tr>
                    }else
                    {
                        <tr>

                            <td><div></div></td>
                            @* Second column: Property name (with level indentation) *@
                            <td>
                                <div style="padding-left: @(prop.Level * 5)px">
                                    @prop.Name
                                </div>
                            </td>
                            @* Third column: Property value input *@
                            <td>
                                <MBaseInput Property="@prop"></MBaseInput>
                            </td>
                        </tr>
                    }

                }


            </tbody>
        </table>
    }
</div>


@code {
    /// <summary>
    /// The model object to generate a form for.
    /// All public properties will be rendered as editable fields.
    /// Supports nested objects and collections.
    /// </summary>
    [NotNull]
    [Parameter]
    public object? Model { get; set; }



    // [Parameter]
    // public Action<string, object?>? FieldHasChanged { get; set; }
    /// <summary>
    /// List of property info objects that drive the form rendering.
    /// Generated from the Model parameter in OnParametersSet().
    /// Contains information about each property including type, value and UI state.
    /// </summary>
    List<ComponentPrptInfo>? componentPrpts = null;

    /// <summary>
    /// Called when parameters are set, initializes the form by parsing the model properties.
    /// </summary>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Model != null)
        {

            componentPrpts = ParsePrpt(Model,0);
        }
        else
        {

            componentPrpts = null;
        }
    }
    /// <summary>
    /// Tracks collapsed/expanded state for rows with nested properties.
    /// Key: Property ID as string, Value: true if collapsed
    /// </summary>
    private Dictionary<string, bool> _collapsedStates = new Dictionary<string, bool>();
    /// <summary>
    /// Toggles the collapsed state of a property row and updates the UI accordingly.
    /// When expanding, loads and inserts nested properties.
    /// When collapsing, removes nested properties from display.
    /// </summary>
    /// <param name="prpt">The property info to toggle</param>
    private void ToggleCollapse(ComponentPrptInfo prpt)
    {
        string id = prpt.Id.ToString();
        if (_collapsedStates.ContainsKey(id))
        {
            _collapsedStates[id] = !_collapsedStates[id];
        }
        else
        {
            _collapsedStates[id] = true;
        }
        prpt.IsCollapsed = _collapsedStates[id];
        if(prpt.IsCollapsed)
        {
            List<ComponentPrptInfo> subPrpts = ParsePrpt(prpt.Value, prpt.Level + 1, prpt);
            componentPrpts!.InsertRange(componentPrpts.IndexOf(prpt) + 1, subPrpts);
        }else
        {
            CollaspePrpts(prpt.Id);
        }
    }
    /// <summary>
    /// Recursively collapses and removes all nested properties under the specified parent ID.
    /// </summary>
    /// <param name="id">The parent property ID to collapse</param>
    void CollaspePrpts(Guid id)
    {
        var cps = componentPrpts!.Where(w => w.ParentId == id).Select(t => t.Id).ToList();
        if(cps != null)
        {
            foreach(var cp in cps)
            {
                CollaspePrpts(cp);
            }
        }
        componentPrpts!.RemoveAll(w => w.ParentId == id);
    }







}
