@using BlazorHiprint.DesignPaper.Components
@using BlazorHiprint.DesignPaper.Data
@inherits MElementBase<MLineTmplt>
<div>
    <svg width="@(Data.SvgWidth)px" height="@(Data.SvgHeight)px">
        <line x1="@Data.StartX" y1="@Data.StartY"
              x2="@(Data.EndX)" y2="@(Data.EndY)"
              stroke="@Data.StrokeColor"
              stroke-width="@(Data?.StrokeWidth)px" />
    </svg>
    <div style="display: @Display;" @ondrag:stopPropagation="true" @ondragstart:stopPropagation="true">

        <!-- 起点控制点 -->
        <div class="start-point resizebtn" draggable="true" @ondrag="StartPointDrag" @ondragstart="@PointDragStart"
             style="cursor:  e-resize; position: absolute;  top: 50%; left: -12px;  position: absolute; width: 8px; height: 8px; background: rgb(255, 102, 0); border-radius: 50%;">
        </div>

        <!-- 终点控制点 -->
        <div class="end-point resizebtn" draggable="true" @ondrag="EndPointDrag" @ondragstart="@PointDragStart"
             style="cursor:  e-resize;  position: absolute;  top: 50%; ;left: 100%; position: absolute; width: 8px; height: 8px; background: rgb(255, 102, 0); border-radius: 50%;">
        </div>

        <!-- 中点控制点（用于整体移动线条） -->
        <div class="mid-point resizebtn" draggable="true" @ondrag="RoationPointDrag" @ondragstart="PointDragStart"
             style="cursor:url('data:image /png;base64,iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAMAAADXqc3KAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAABvUExURUdwTP///9XV1R0dHf///3Nzc////////////////1ZWVq+vr/T09PX19QQEBP///////8XFxf///////////wYGBv///+jo6P///4aGhqioqMzMzP///2BgYP///////////zExMf///wAAAP///xLps0AAAAAjdFJOUwCxxOdixRDmzSDMv8/Z+tz5wWpXWPk3zALCv8KnyXZVMNuNPnv3CwAAAJ1JREFUKM/NkckOwyAMRFkDBMhC9qWr+//fWCIV1WlzrjoXS36yxmMT8hdqqKoUvRAjMtw22kvecem1GjTuK1vApmI+wQMBbQFy5li+QQRaX4AtRX+vbntAJeRl9HTTx4TiwESs61DXNUPmVQeujzVrQwh43TTxpeRBslVfMUhbiXKWyiAwvnIsMcdyJkfJYdpNvG/ltDm+bjP+8KFP8ggL+zQLGxwAAAAASUVORK5CYII') 14 14,
 alias; top: -16px; margin-left: -4px; left: 50%; position: absolute; width: 8px; height: 8px; background: rgb(255, 102, 0); border-radius: 50%;">
        </div>

    </div>
</div>

@code {
    string Display { get { return Data.IsSelected ? "block" : "none"; } }


    //拖拽过程记录开始位置
    double dragStartX { get; set; } = 0;
    double dragStartY { get; set; } = 0;
    private void RoationPointDrag(DragEventArgs args)
    {
        // 这里可以实现起点拖拽逻辑，暂时留空
        // 由于线条起点固定在(10,10)，这个拖拽主要用于移动整个线条
        double k = Math.Atan2((args.ClientY - dragStartY), (args.ClientX - dragStartX));

        Data.Angle = k / Math.PI * 180;

    }


    // 起点拖拽 - 改变线条的起始位置（实际上是改变整个线条的位置）
    private void StartPointDrag(DragEventArgs args)
    {
        double deltaX = args.ClientX - dragStartX;
        //   double deltaY = args.ClientY - dragStartY;

        // 计算新的终点位置
        //   double newEndX = _data.EndX + deltaX;
        //double newEndY = _data.EndY + deltaY;
        double newWith = Data.SvgWidth - deltaX;
        Data.Length = newWith / Math.Cos(Data.Angle * Math.PI / 180);
        Data.Left += deltaX;

        dragStartX = args.ClientX;
    }

    private void PointDragStart(DragEventArgs args)
    {
        dragStartX = args.ClientX;
        dragStartY = args.ClientY;
    }

    // 终点拖拽 - 改变线条长度和角度
    private void EndPointDrag(DragEventArgs args)
    {
        double deltaX = args.ClientX - dragStartX;
        //   double deltaY = args.ClientY - dragStartY;

        // 计算新的终点位置
        //   double newEndX = _data.EndX + deltaX;
        //double newEndY = _data.EndY + deltaY;
        double newWith = Data.SvgWidth + deltaX;
        Data.Length = newWith / Math.Cos(Data.Angle * Math.PI / 180);


        dragStartX = args.ClientX;
        //  dragStartY = args.ClientY;
    }


    private void MidPointDragStart(DragEventArgs args)
    {
        dragStartX = args.ClientX;
        dragStartY = args.ClientY;
    }
}
