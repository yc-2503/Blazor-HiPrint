@using System.Diagnostics.CodeAnalysis
@using BlazorHiprint.DesignPaper.Data

@namespace BlazorHiprint.DesignPaper.Components

<div class="hiprint-printElement design" style="@Style" draggable="true" 
@onclick="@OnClick" @onclick:stopPropagation="true" 
tabindex="0"
@ondragstart="@HandleDragStart" @onkeydown="PrintPaperOnKeyPressed">

    @if (selectedType != null)
    {
        <DynamicComponent Type="selectedType" Parameters="parameter" />
    }
    else
    {
        <div>NULL</div>
    }
    <div class="resize-panel selected" 
    style="width: 100%; height: 100%; top: 0px; left: 0px; position: absolute;
        background-color: rgba(0, 0, 0, 0.5); cursor: move; display: @Display;">

        <div class="del-btn" @onclick="OnDelBtnClick" >âœ•</div>
    </div>
</div>

@code {
    [NotNull]
    [Parameter]
    public MTmpltBase? Temp { get; set; }
    [Parameter]
    public Action<MTmpltBase>? OnClicked { get; set; }
    [Parameter]
    public Action<MTmpltBase>? OnDeletedEventHandler { get; set; }
    Dictionary<string, object>? parameter;

    string Display => Temp?.IsSelected == true ? "block" : "none";
    
    bool _shouldRender = false;
    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnParametersSetAsync()
    {
        parameter = new Dictionary<string, object>()
        {
            { "Value", Temp }
        };
        Temp.FieldHasChanged = (_, _) => { _shouldRender = true; StateHasChanged(); };
        selectedType = PrintElementsFactory.GetPrintElementType(Temp);
        await base.OnParametersSetAsync();
        _shouldRender = false;
    }

    string Style => $@"position: absolute;
            top: {Temp?.Top}px;
            left: {Temp?.Left}px;";

    private Type? selectedType = null;

    private void OnClick()
    {
        if (Temp != null) 
        {
            Temp.IsSelected = true;   
            OnClicked?.Invoke(Temp);
        }
    }

    void OnDelBtnClick() => OnDeletedEventHandler?.Invoke(Temp);

    void PrintPaperOnKeyPressed(KeyboardEventArgs args)
    {
        if (args.Key == "Delete")
        {
            OnDeletedEventHandler?.Invoke(Temp);
        }
    }

    private void HandleDragStart(DragEventArgs args)
    {
        args.DataTransfer.DropEffect = "move";
        args.DataTransfer.EffectAllowed = "move";
        OnClicked?.Invoke(Temp);
    }
}
